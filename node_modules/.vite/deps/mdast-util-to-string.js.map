{
  "version": 3,
  "sources": ["../../mdast-util-to-string/index.js"],
  "sourcesContent": ["/**\n * @typedef Options\n * @property {boolean} [includeImageAlt=true]\n */\n\n/**\n * Get the text content of a node.\n * Prefer the node\u2019s plain-text fields, otherwise serialize its children,\n * and if the given value is an array, serialize the nodes in it.\n *\n * @param {unknown} node\n * @param {Options} [options]\n * @returns {string}\n */\nexport function toString(node, options) {\n  var {includeImageAlt = true} = options || {}\n  return one(node, includeImageAlt)\n}\n\n/**\n * @param {unknown} node\n * @param {boolean} includeImageAlt\n * @returns {string}\n */\nfunction one(node, includeImageAlt) {\n  return (\n    (node &&\n      typeof node === 'object' &&\n      // @ts-ignore looks like a literal.\n      (node.value ||\n        // @ts-ignore looks like an image.\n        (includeImageAlt ? node.alt : '') ||\n        // @ts-ignore looks like a parent.\n        ('children' in node && all(node.children, includeImageAlt)) ||\n        (Array.isArray(node) && all(node, includeImageAlt)))) ||\n    ''\n  )\n}\n\n/**\n * @param {Array.<unknown>} values\n * @param {boolean} includeImageAlt\n * @returns {string}\n */\nfunction all(values, includeImageAlt) {\n  /** @type {Array.<string>} */\n  var result = []\n  var index = -1\n\n  while (++index < values.length) {\n    result[index] = one(values[index], includeImageAlt)\n  }\n\n  return result.join('')\n}\n"],
  "mappings": ";;;AAcO,SAAS,SAAS,MAAM,SAAS;AACtC,MAAI,EAAC,kBAAkB,KAAI,IAAI,WAAW,CAAC;AAC3C,SAAO,IAAI,MAAM,eAAe;AAClC;AAOA,SAAS,IAAI,MAAM,iBAAiB;AAClC,SACG,QACC,OAAO,SAAS,aAEf,KAAK,UAEH,kBAAkB,KAAK,MAAM,OAE7B,cAAc,QAAQ,IAAI,KAAK,UAAU,eAAe,KACxD,MAAM,QAAQ,IAAI,KAAK,IAAI,MAAM,eAAe,MACrD;AAEJ;AAOA,SAAS,IAAI,QAAQ,iBAAiB;AAEpC,MAAI,SAAS,CAAC;AACd,MAAI,QAAQ;AAEZ,SAAO,EAAE,QAAQ,OAAO,QAAQ;AAC9B,WAAO,SAAS,IAAI,OAAO,QAAQ,eAAe;AAAA,EACpD;AAEA,SAAO,OAAO,KAAK,EAAE;AACvB;",
  "names": []
}
